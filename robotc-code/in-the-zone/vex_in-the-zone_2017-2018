#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    goalpot,        sensorPotentiometer)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_3,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_4,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port2,           claw,          tmotorServoStandard, openLoop)
#pragma config(Motor,  port3,           flipper,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           mobile,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           lift,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           backright,     tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_3)
#pragma config(Motor,  port7,           frontright,    tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_2)
#pragma config(Motor,  port8,           frontleft,     tmotorVex393_MC29, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port9,           backleft,      tmotorVex393_MC29, openLoop, encoderPort, I2C_4)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"


// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
//#pragma competitionControl(Competition)

//Main competition background code...do not modify!
//#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

//void pre_auton()
//{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	//bStopTasksBetweenModes = true;
	//drivef=0; armr=0;
//}

void forward(int drivef)
{
	clearTimer(T1);
	motor[backleft] = 80;
	motor[backright] = 80;
	motor[frontleft] = 80;
	motor[frontright] = 80;
	wait1Msec(drivef);
	motor[backleft] = 0;
	motor[backright] = 0;
	motor[frontleft] = 0;
	motor[frontright] = 0;

}

void armraise(int armr)
{
	clearTimer(T1);
	motor[flipper] = 80;
	wait1Msec(armr);
	motor[flipper] = 0;

}

void goallift()
{
	clearTimer(T1);
	motor[mobile] = -80;
	waitUntil (SensorValue[goalpot]>=20);
	motor[mobile] = 0;
	motor[backleft] = 80;
	motor[backright] = 80;
	motor[frontleft] = 80;
	motor[frontright] = 80;
	wait1Msec(1000);
	motor[backleft] = 0;
	motor[backright] = 0;
	motor[frontleft] = 0;
	motor[frontright] = 0;
	motor[mobile] = 80;
	waitUntil (SensorValue[goalpot]<=20);
	motor[mobile] = 0;




}
void armlower(int arml)
{
	clearTimer(T1);
	motor[flipper] = -80;
	wait1Msec(arml);
	motor[flipper] = 0;

}
void turn180(int turnaround)
{
	motor(backleft) = -127;
	motor(frontleft) = -127;
	motor(backright) = 127;
	motor(frontright) = 127;
	wait1Msec(turnaround);
	motor(backleft) = 0;
	motor(frontleft) = 0;
	motor(backright) = 0;
	motor(frontright) = 0;
}

task autonomous()
{
forward(2000);
armraise(1500);
goallift();
armlower(1500);
turn180(1000);
forward(1000);
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

//task usercontrol()
task main()
{

while(true)
{

	//Mobile goal lifter
	if (vexRT[Btn7U])
	{
		motor[mobile] = 60;
	}



	if (vexRT[Btn7D])
	{
		motor[mobile] = -60;
	}



	if (vexRT[Btn7D] == false && vexRT[Btn7U] == false )
	{
		motor[mobile] = 0;
	}









	//Flipper

	int flipperdead = 20;

	if(abs(vexRT[Ch2])>flipperdead)
	{
		motor[flipper] = vexRT[Ch2];
	}
	else
	{
		motor[flipper] = 0;
	}

	//Claw


	if (vexRT[Btn8L])
	{
		motor[claw] = 30;
	}

	if (vexRT[Btn8R])
	{
		motor[claw] = 90;
	}

		if (vexRT[Btn8R] == false && vexRT[Btn8L] == false )
	{
		motor[claw] = 0;
	}





	//lift

	if (vexRT[Btn5U])
	{
		motor[lift] = -127;
	}

	if (vexRT[Btn6U])
	{
		motor[lift] = 127;
	}

if (vexRT[Btn5U] == false && vexRT[Btn6U] == false )
	{
		motor[lift] = 0;
	}



	//Drive system

	int turning;
	turning = 0;

	if (vexRT[Btn5D])
	{
		turning=-127;
	}
	if (vexRT[Btn6D])
	{
		turning=127;
	}
	if (vexRT[Btn7L])
	{
		turning=-50;
	}
	if (vexRT[Btn7R])
	{
		turning=50;
	}

	int deadzone;
	deadzone= 20;


	int b, c;



	if(abs(vexRT[Ch1])>deadzone)
	{
		turning = vexRT[Ch1];
	}



	if(abs(vexRT[Ch3])>deadzone)
	{
		b = vexRT[Ch3];
	}
	else
	{
		b = 0;
	}


	if(abs(vexRT[Ch4])>deadzone)
	{
		c = vexRT[Ch4];
	}
	else
	{
		c = 0;
	}


	motor[frontright] = b - turning - c;

	motor[backright] = b - turning + c;

	motor[frontleft] = b + turning + c;

	motor[backleft] = b + turning - c;

}
}
